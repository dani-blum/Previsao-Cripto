# -*- coding: utf-8 -*-
"""Previsão Cripto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JaQhdc-Lu4JFuDqxayMlIqbZ05tPUeKq
"""

import requests
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Definição da moeda e API
MOEDA = "bitcoin"
API_URL = f"https://api.coingecko.com/api/v3/coins/{MOEDA}/market_chart?vs_currency=usd&days=30&interval=daily"

# Coletando dados da API
response = requests.get(API_URL)
data = response.json()

# Criando DataFrame
prices = data["prices"]
df = pd.DataFrame(prices, columns=["timestamp", "price"])
df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")

# Criando variáveis preditoras
df["prev_price"] = df["price"].shift(1)
df["price_change"] = df["price"].pct_change()
df.dropna(inplace=True)

# Criando a variável alvo (1 = preço sobe, 0 = preço cai)
df["target"] = (df["price_change"] > 0).astype(int)

# Separando features e target
X = df[["prev_price", "price_change"]]
y = df["target"]

# Normalização
escala = StandardScaler()
X = escala.fit_transform(X)

# Separando dados de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinando modelo
modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)

# Fazendo previsões
y_pred = modelo.predict(X_test)

# Avaliação
aac = accuracy_score(y_test, y_pred)
print(f"Acurácia do modelo: {aac:.2f}")

# Importância das variáveis
importancias = modelo.feature_importances_
features = ["prev_price", "price_change"]

# Plotando importâncias
sns.barplot(x=importancias, y=features)
plt.xlabel("Importância")
plt.ylabel("Variáveis")
plt.title("Importância das Variáveis no Modelo")
plt.show()

# Salvando CSV
df.to_csv("historico_precos.csv", index=False)